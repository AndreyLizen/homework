# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс
# Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки
# (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек
# в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются
# все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class Cell:
    def __init__(self, element):
        self.element = element

    def __add__(self, other):
        return f"Результат суммирования: {Cell(self.element + other.element)}"

    def __sub__(self, other):
        if self.element <= other.element:
            return "\033[1m\033[31m{}\033[0m".format("Вычитание невозможно! Количество ячеек не может быть отрицательным!")
        else:
            return f"Результат вычитания: {Cell(self.element - other.element)}"

    def __mul__(self, other):
        return f"Результат умножения: {Cell(self.element * other.element)}"

    def __truediv__(self, other):
        return f"Результат целочисленного деления: {Cell(self.element // other.element)}"

    def __str__(self):
        if self.element < 0:
            return "\033[1m\033[31m{}\033[0m".format("Количество ячеек не может быть отрицательным! Исправьте вводные данные!")
        else:
            return f"Клетка с количеством ячеек {self.element}."

    def make_order(self, row):
        total_row = self.element
        while row <= total_row:
            total_row = total_row - row
            print("*" * row)
        print("*" * total_row)


c1 = Cell(17)
c2 = Cell(15)
print(c1)
print(c2)
print(c1 + c2)
print(c1 - c2)
print(c1 * c2)
print(c1 / c2)
c1.make_order(5)
